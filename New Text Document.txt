class Solution {
public:
   vector<int> dfs(int node,int p,vector<vector<int>> &adj, string &labels,vector<int> &ans){
           vector<int> nodecount(26);
           nodecount[labels[node]-'a']=1;

           for(auto i:adj[node]){
               if(i==p) 
                continue;

                vector<int> childcount=dfs(i,node,adj,labels,ans);
                for(int i=0;i<26;i++){
                   nodecount[i]+=childcount[i]; 
                }
           }

           ans[node]=nodecount[labels[node]-'a'];
           return nodecount;
   }
    vector<int> countSubTrees(int n, vector<vector<int>>& edges, string labels) {
        
        vector<vector<int>> adj(n);
        for(auto i:edges){
            adj[i[0]].push_back(i[1]);
            adj[i[1]].push_back(i[0]);
        }
        
        vector<int> ans(n,0);
        dfs(0,-1,adj,labels,ans);
        return ans;
        
    }
};