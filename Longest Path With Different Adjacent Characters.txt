class Solution {
public:
    int dist[100005];
    int ans=1;
    void dfs(int node ,string &s, vector<vector<int>> &adj){
        dist[node]=1;

        for(auto a:adj[node]){
             dfs(a,s,adj);
             if(s[node]!=s[a]){
               ans=max(ans,dist[node]+dist[a]);
             dist[node]=max(dist[node],dist[a]+1) ;

             }   
        }
        
    }
    int longestPath(vector<int>& parent, string s) {
        int n=parent.size();
        if(n==1) return 1;
        if( n==2 ) {
           if( s[0]!=s[1]) return 2;
           return 1;
        }
        vector<vector<int>> adj(n);
        for(int i=1;i<n;i++){
            adj[parent[i]].push_back(i);
        }
        dfs(0,s,adj);
        return ans;
    }
};